import json
import os

from decouple import config
from chatterbot import ChatBot
from chatterbot.trainers import JsonFileTrainer, ListTrainer

from bot.models import Question
from chatterbot_model.models import ChatLog, TrainingPair, Statement, Tag, TagAssociation
import logging
from bs4 import BeautifulSoup

logger = logging.getLogger('chatterbot')

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
DEFAULT_RESPONSE = ("–Ø –Ω–µ chatgpt –∏ –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã üòä. "
                    "–ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–í–æ–ø—Ä–æ—Å—ã'. –¢–∞–º —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
CONFIDENCE_THRESHOLD = 0.4

class CommonBotModel:
    def __init__(self,
                 uri_db: str,
                 directory_json: str = None,
                 train: bool = False):
        self.bot = ChatBot(
            'FAQBot',
            read_only=True,
            storage_adapter="chatterbot.storage.SQLStorageAdapter",
            database_uri=uri_db
        )

        if train and directory_json:
            self.train_from_json(self.bot, directory_json)
            print("–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
            logging.info("–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")

        print('‚úÖ –ú–æ–¥–µ–ª—å —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞!')

    @staticmethod
    def generate_training_json(json_path: str = "./chatterbot_model/data/training_data.json"):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ ChatterBot –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—É—á–∞—é—â–∏—Ö –ø–∞—Ä.
        """
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π JSON-—Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(json_path):
                os.remove(json_path)
                logging.info(f"üßπ –°—Ç–∞—Ä—ã–π JSON-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {json_path}")
            conversation = []

            # –í–æ–ø—Ä–æ—Å—ã –∏–∑ –º–æ–¥–µ–ª–∏ Question
            questions = Question.objects.filter(is_published=True)
            for q in questions:
                category = q.category.name.strip()
                clean_q = BeautifulSoup(q.text, features="lxml").text.strip()
                clean_a = BeautifulSoup(q.answer, features="lxml").text.strip()

                # User —Å–æ–æ–±—â–µ–Ω–∏–µ
                conversation.append({
                    "text": clean_q,
                    "in_response_to": None,
                    "persona": "user",
                    "conversation": category,
                    "tags": [category]
                })

                # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
                conversation.append({
                    "text": clean_a,
                    "in_response_to": clean_q,
                    "persona": "bot",
                    "conversation": category,
                    "tags": [category]
                })

            # –û–±—É—á–∞—é—â–∏–µ –ø–∞—Ä—ã –∏–∑ TrainingPair
            training_pairs = TrainingPair.objects.filter(is_applied=False)
            for pair in training_pairs:
                category = "–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

                conversation.append({
                    "text": pair.question.strip(),
                    "in_response_to": None,
                    "persona": "user",
                    "conversation": category,
                    "tags": [category]
                })

                conversation.append({
                    "text": pair.answer.strip(),
                    "in_response_to": pair.question.strip(),
                    "persona": "bot",
                    "conversation": category,
                    "tags": [category]
                })

            # –ó–∞–ø–∏—Å—å –≤ JSON
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump({"conversation": conversation}, f, ensure_ascii=False, indent=4)

            logging.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω JSON-—Ñ–∞–π–ª –æ–±—É—á–µ–Ω–∏—è: {json_path}")
            return json_path

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON-—Ñ–∞–π–ª–∞: {e}")
            raise

    @staticmethod
    def train_from_json(bot: ChatBot, directory: str):
        trainer = JsonFileTrainer(
            bot,
            field_map={
                'text': 'text',
                'in_response_to': 'in_response_to',
                'persona': 'persona',
                'conversation': 'conversation',
                'tags': 'tags'
            }
        )
        trainer.train(directory)
        print('‚úÖ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')
        logging.info('‚úÖ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')

    def reset_model(self, json_directory: str = None):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –µ–≥–æ –∏–∑ JSON-—Ñ–∞–π–ª–∞.
        """
        try:
            if not json_directory:
                print('–æ–±—É—á–µ–Ω–∏–µ –º–æ–µ–¥–ª–∏--------')
                json_directory = str(self.generate_training_json())
                print(json_directory)

            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            training_bot = ChatBot(
                'FAQBot',
                read_only=False,
                storage_adapter="chatterbot.storage.SQLStorageAdapter",
                database_uri=self.bot.storage.database_uri
            )

            TagAssociation.objects.using('chatbot').all().delete()
            logging.info("–ú–æ–¥–µ–ª—å TagAssociation –æ—á–∏—â–µ–Ω–∞")

            Tag.objects.using('chatbot').all().delete()
            logging.info("–ú–æ–¥–µ–ª—å Tag –æ—á–∏—â–µ–Ω–∞")

            Statement.objects.using('chatbot').all().delete()
            logging.info("–ú–æ–¥–µ–ª—å Statement –æ—á–∏—â–µ–Ω–∞")

            # –û—á–∏—â–∞–µ–º ChatLog (—Ç–æ–ª—å–∫–æ –æ–±—É—á–∞—é—â–∏–µ –ø–∞—Ä—ã)
            ChatLog.objects.using('chatbot').filter(is_training_pair=True).delete()
            logging.info("–û–±—É—á–∞—é—â–∏–µ –ø–∞—Ä—ã –≤ ChatLog —É–¥–∞–ª–µ–Ω—ã")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_applied –≤ TrainingPair
            TrainingPair.objects.using('chatbot').update(is_applied=False)
            logging.info("–§–ª–∞–≥–∏ is_applied –≤ TrainingPair —Å–±—Ä–æ—à–µ–Ω—ã")

            # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ JSON
            self.train_from_json(training_bot, json_directory)
            TrainingPair.objects.using('chatbot').update(is_applied=True)
            logging.info(f"–ë–æ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω –∏–∑ JSON: {json_directory}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            self.bot = ChatBot(
                'FAQBot',
                read_only=True,
                storage_adapter="chatterbot.storage.SQLStorageAdapter",
                database_uri=self.bot.storage.database_uri
            )
            logging.info("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")

        except Exception as e:
            print(e)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def train_from_pair(self, user_input: str, bot_response: str):
        training_bot = ChatBot(
            'FAQBot',
            read_only=False,
            storage_adapter="chatterbot.storage.SQLStorageAdapter",
            database_uri=self.bot.storage.database_uri
        )

        try:
            trainer = ListTrainer(training_bot)
            trainer.train([user_input, bot_response])
            print(f"‚úÖ –ë–æ—Ç –¥–æ–æ–±—É—á–µ–Ω –Ω–∞ –ø–∞—Ä–µ: '{user_input}' -> '{bot_response}'")
            logging.info(f"–ë–æ—Ç –¥–æ–æ–±—É—á–µ–Ω –Ω–∞ –ø–∞—Ä–µ: '{user_input}' -> '{bot_response}'")

            ChatLog.objects.using('chatbot').create(
                user_message=user_input,
                bot_response=bot_response,
                is_training_pair=True
            )
            self.bot = ChatBot(
                'FAQBot',
                read_only=True,
                storage_adapter="chatterbot.storage.SQLStorageAdapter",
                database_uri=self.bot.storage.database_uri
            )
            logging.info("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        finally:
            del training_bot

    def get_answer(self, text: str) -> str:
        print(f"[user]: {text}")
        response = self.bot.get_response(text)
        answer = str(response)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if response.confidence < CONFIDENCE_THRESHOLD:
            answer = DEFAULT_RESPONSE
            print(f"[bot]: {answer} (confidence: {response.confidence})")
            logging.info(f"–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{text}', confidence: {response.confidence}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: '{answer}'")
        else:
            print(f"[bot]: {answer} (confidence: {response.confidence})")
            logging.info(f"–û—Ç–≤–µ—Ç –¥–ª—è '{text}': '{answer}', confidence: {response.confidence}")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ChatLog
        try:
            ChatLog.objects.using('chatbot').create(
                user_message=text,
                bot_response=answer
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞: {e}")

        return answer


class LibraryBotModel(CommonBotModel):
    _instance = None  # –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è Singleton

    def __init__(self,
                 uri_db: str = config('DATABASE_URI_CHATTERBOT'),
                 directory_json: str = "./chatterbot_model/data/training_data.json",
                 train: bool = False):
        # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π init –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        super().__init__(uri_db=uri_db, directory_json=directory_json, train=train)

    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            print("üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Singleton LibraryBotModel")
            logging.info("üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Singleton LibraryBotModel")
            cls._instance = cls()
        return cls._instance